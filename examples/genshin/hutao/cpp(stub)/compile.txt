cl /std:c++17 /LD hutao_minhook.cpp /DEF:hutao_dll.def /Fe:hutao_minhook.dll
cl /EHsc /O2 /MT /std:c++17 hutao_injector.cpp /Fe:hutao_injector.exe
cl /EHsc /O2 /MT /std:c++17 hutao_launcher.cpp /Fe:hutao_launcher.exe
sudo .\hutao_injector.exe "D:\Program Files\Genshin Impact\Genshin Impact Game\YuanShen.exe" "hutao_minhook.dll"

https://learn.microsoft.com/zh-cn/cpp/build/reference/compiler-options-listed-by-category

## cl.exe 基础概念

`cl.exe`是Microsoft Visual Studio附带的C/C++编译器命令行工具。

## 基本语法
```cmd
cl [选项] 源文件 [链接选项]
```

## 主要编译选项

### 1. 输出类型控制
```cmd
/Fe:filename    # 指定可执行文件名
/Fo:filename    # 指定对象文件名  
/Fm:filename    # 指定映射文件名
/LD             # 编译为DLL (动态链接库)
/LDd            # 编译为调试版DLL
/MD             # 使用多线程运行时库(DLL版本)
/MT             # 使用多线程运行时库(静态版本)
/MTd            # 使用多线程调试运行时库(静态版本)
```

### 2. 优化选项
```cmd
/O1             # 最小化大小
/O2             # 最大化速度 (推荐)
/Od             # 禁用优化 (调试时用)
/Ox             # 最大优化
```

### 3. 调试信息
```cmd
/Zi             # 生成完整调试信息
/Z7             # 生成旧格式调试信息
/DEBUG          # 生成调试信息到PDB文件
```

### 4. 警告控制
```cmd
/W0             # 禁用所有警告
/W1             # 显示严重警告
/W2             # 显示重要警告  
/W3             # 显示大部分警告(默认)
/W4             # 显示所有警告
/Wall           # 显示所有警告(包括系统头文件)
/WX             # 将警告视为错误
```

### 5. C++标准
```cmd
/std:c++11      # C++11标准
/std:c++14      # C++14标准
/std:c++17      # C++17标准
/std:c++20      # C++20标准
/std:c++latest  # 最新标准
```

### 6. 异常处理
```cmd
/EHsc           # 启用C++异常处理(推荐)
/EHs            # 启用同步异常处理
/EHa            # 启用异步异常处理
```

### 7. 预处理器选项
```cmd
/D macro        # 定义宏
/U macro        # 取消定义宏
/I directory    # 添加包含目录
/E              # 仅预处理到标准输出
/EP             # 预处理到标准输出(无#line)
```

## 具体编译示例分析

### 1. 编译DLL示例
```cmd
cl /std:c++17 /LD hutao_minhook.cpp /DEF:hutao_dll.def /Fe:hutao_minhook.dll
```

**参数解析：**
- `/std:c++17` - 使用C++17标准
- `/LD` - 编译为DLL
- `hutao_minhook.cpp` - 源文件
- `/DEF:hutao_dll.def` - 指定模块定义文件(导出函数列表)
- `/Fe:hutao_minhook.dll` - 输出文件名

### 2. 编译可执行文件示例
```cmd
cl /EHsc /O2 /MT /std:c++17 hutao_injector.cpp /Fe:hutao_injector.exe
```

**参数解析：**
- `/EHsc` - 启用C++异常处理
- `/O2` - 最大化速度优化
- `/MT` - 静态链接运行时库
- `/std:c++17` - C++17标准
- `hutao_injector.cpp` - 源文件
- `/Fe:hutao_injector.exe` - 输出文件名

## 常用编译配置

### Debug配置
```cmd
cl /MDd /Od /Zi /D_DEBUG /std:c++17 source.cpp /Fe:app_debug.exe
```

### Release配置
```cmd
cl /MD /O2 /DNDEBUG /std:c++17 source.cpp /Fe:app_release.exe
```

### 静态链接配置
```cmd
cl /MT /O2 /std:c++17 source.cpp /Fe:app_static.exe
```

## 链接器选项

### 常用链接选项
```cmd
/LINK           # 传递选项给链接器
/LIBPATH:dir    # 添加库搜索路径
library.lib     # 链接指定库
/SUBSYSTEM:CONSOLE    # 控制台应用
/SUBSYSTEM:WINDOWS    # Windows应用
/MACHINE:X64    # 64位目标
/MACHINE:X86    # 32位目标
```

### 链接示例
```cmd
cl source.cpp /link /LIBPATH:"C:\libs" user32.lib kernel32.lib
```

## 模块定义文件(.def)

用于DLL导出函数：
```def
EXPORTS
    HookFunction
    UnhookFunction
    InitializeHook
```

## 实用编译脚本

### 批处理脚本示例
```cmd
@echo off
echo Compiling DLL...
cl /std:c++17 /LD /O2 /MT minhook.cpp /DEF:exports.def /Fe:minhook.dll

echo Compiling injector...
cl /std:c++17 /O2 /MT /EHsc injector.cpp /Fe:injector.exe

echo Compiling launcher...  
cl /std:c++17 /O2 /MT /EHsc launcher.cpp /Fe:launcher.exe

echo Build complete!
pause
```

## 环境设置

### 使用Visual Studio命令提示符
```cmd
# 64位
"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"

# 32位
"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars32.bat"
```

### 手动设置环境变量
```cmd
set PATH=%PATH%;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.xx.xxxxx\bin\Hostx64\x64
set INCLUDE=%INCLUDE%;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.xx.xxxxx\include
set LIB=%LIB%;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.xx.xxxxx\lib\x64
```

## 常见问题解决

### 1. 找不到头文件
```cmd
cl /I"C:\additional\includes" source.cpp
```

### 2. 链接库缺失
```cmd
cl source.cpp /link /LIBPATH:"C:\libs" missing.lib
```

### 3. 运行时库冲突
选择一致的运行时库：`/MD`, `/MT`, `/MDd`, `/MTd`